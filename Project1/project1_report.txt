1. Basic information
Team Number: 42
CruzID of Submitter: bhaire
Student Name of Submitter: Bradley Haire
Names of the other Team Members: Lucas Ellenberger, Harrison Nou


2. Internal Record Format
- Describe your record format design, and explain how your design provide O(1) field access. If your design does not provide O(1) field access, just mention that you haven't implemented this feature.
    
        The internal formatting of our record stores the record is very similar to the format which 
    was given. We added an array of shorts to hold the field offsets within a record.
    So, our data is stored as null bytes, array of field offsets, and then the actual data.

        The first n bytes of the record stores the null bytes. The number n can be determined by
    the formula: ceil(number of fields in a record / 8). Each bit within a
    byte correspondes to a field in the record. A 1 indicates the field is null 
    and a 0 indicates the field is non:-null.

        Following the null field indicators, we have an array of shorts. Each entry in the array is a short
    that points to the beginning of the corresponding field. This array allows us to access a field in 
    O(1) time. When accessing a specific field, we can check the corresponding null bit, check the 
    corresponding field offset, and jump directly to the field. We will use the corresponding entry 
    in the vector of attributes to determine the field type and length.

        Following the array of field offsets, data belonging to the fields are
    stored sequentially. Any fields that have indicated as null from the previous
    segment are disregarded here. For each field, fixed length fields such as
    integers and floats are stored directly but variable length fields like VARCHARs
    prefix the length of the field beforehand.
    
    PFM Class:
        The PagedFileManager class in our code is implemented as a Singleton
        to ensure consistent management of file operations, such as creating, destroying,
        opening, and closing files. PFM uses standard C++ file I/O functions such as fopen,
        fclose, fread, fwrite, and fseek to directly interact with the operating systemâ€™s
        file system.

    FileHandle Class:
        This FileHandle class encapsulates metadata about open files, including the count of
        pages within the file and the number of operations performed on each file such as reads,
        writes, and appends. Each FileHandle instance is associated with a specific file
        and maintains a direct pointer to it, ensuring all file interactions are centralized
        (Multiple FileHandle instances can open the same file). The class provides methods
        for reading and writing to specific pages, appending new pages, and retrieving the
        current page count, all of which are fundamental for higher level database operations. 

    RecordBasedFileManager Class:
        This class manages record-based operations within pages in a file. RBFM utilizes an
        approach where each record is managed through a detailed descriptor that includes
        the type and size of each field, accommodating data types such as integers, floats,
        and variable-length strings (VARCHAR).
    
        insertRecord:
            This function first calculates the total size needed for the record, including any
            necessary space for handling VARCHAR fields. It then iterates through the pages of
            the file to find a suitable spot based on available space. If enough space is found,
            it inserts the record and updates the page's directory entries. If no suitable
            space is found in an existing page, it appends a new page to the file.

        readRecord:
            It fetches the page specified in the RID, then locates the record within that page
            using the offset provided in the page's mini-directory. The record's data is then
            copied into the provided buffer. We remove the field offset array from the data.
            We only return the null bytes and actual data, as it is originally given to us.

        printRecord:
            We iterate over every entry in the vector of attributes. As we iterate, we 
            read the corresponding null-indicator bit to determine the presence of NULL
            fields. For non-null fields, it reads the data according to the field type (int,
            float, VARCHAR) and prints them. For VARCHAR fields, it also reads the length
            prefix to handle the variable size. Then, we print name: NULL or name: value,
            depending on the null bit.


5. Other (optional)
- Freely use this section to tell us about other things about your Project1 solution that may help us understand and grade your solution.

